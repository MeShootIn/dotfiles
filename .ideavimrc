""" BASICS """

" Source local `vimrc`.
source ~/.vim/vimrc
" Map leader to slash.
let mapleader='\'



""" PLUGINS """

" INFO https://github.com/JetBrains/ideavim/wiki/Emulated-plugins

if has('ide')
  if &ide =~? 'PyCharm'
    " Additional text objects: `ai`, `ii`, `aI`.
    Plug 'michaeljsmith/vim-indent-object'
  endif
endif

" TODO Requires IdeaVim-EasyMotion.
Plug 'easymotion/vim-easymotion'

" Emulation of the `NERDTree` plugin.
" `r` - recursively refresh the current directory.
" `R` - recursively refresh the current root.
" `K` - navigate to the first sibling of current file/directory.
" `J` - navigate to the last sibling of current file/directory.
" `o` - open file in a new tab.
" `O` - recursively open the selected directory.
" `P` - jump to the root node.
" `p` - jump to current nodes parent.
" `A` - zoom (maximize/minimize) the NERDTree window.
" `v` - split vertically.
" `h` - split horizontally.
Plug 'preservim/nerdtree'

" Does not support `yss`.
Plug 'tpope/vim-surround'

" Does not support `gcA`.
Plug 'tpope/vim-commentary'

" Commands: `gr`, `grr`.
Plug 'vim-scripts/ReplaceWithRegister'

" NOTE Does not refactor (like Ctrl + F6).
" Provides a text-object 'a' (argument).
" Useful commands: `daa`, `cia`.
" Plug 'vim-scripts/argtextobj.vim'

" Easy text exchange operator for Vim.
" `cx{motion}` - define the first {motion} to exchange, then define the second
" {motion} (for example, by `.` repeating) and perform the exchange.
" `cxx` - like `cx`, but use the current line.
" `X` - like `cx`, but for Visual mode => without `.` repeating.
" `cxc` - clear any {motion} pending for exchange.
Plug 'tommcdo/vim-exchange'

" Provides text objects (`ae` and `ie`) to select the entire content of a
" buffer. The best text object: `ie` (like `ae`, but does not include leading
" and trailing empty lines).
Plug 'kana/vim-textobj-entire'

" Make the yanked region apparent!
Plug 'machakann/vim-highlightedyank'
" A negative number makes the highlight persistent.
let g:highlightedyank_highlight_duration='-1'
let g:highlightedyank_highlight_color='rgba(241, 250, 140, 128)'

" Lines that only contain whitespace are also matched by the `{` and `}`
" motions.
Plug 'dbakker/vim-paragraph-motion'

" Extended matching with `%`.
Plug 'chrisbra/matchit'



""" IDEA SPECIFIC SETTINGS """

" Switches to English input method in Normal mode and restore input method in
" Insert mode.
set keep-english-in-normal-and-restore-in-insert
" Make sure `ideaput` is enabled for clipboard to enable native IDE's insertion
" in Vim.
set clipboard+=ideaput
" Throws an exception on IdeaVim error.
set ideastrictmode
" If true, creation of global mark will trigger creation of IDE's bookmark and
" vice versa.
set ideamarks
" Define the mode that would be enabled during the refactoring (renaming, live
" template, introduce variable, etc).
set idearefactormode=select
" "Smart join" via the IDE (<S-j>).
set ideajoin
" TODO https://github.com/JetBrains/ideavim/wiki/%22set%22-commands
set ideastatusicon=enabled
" TODO Defines the behaviour of ":w" command.
set ideawrite=all
" Disable the use of the <Tab> key for finishing the lookup (autocompletion).
set lookupkeys-=<Tab>
" Define the list of additional buffers where IdeaVim is enabled.
set ideavimsupport=dialog



""" MAPPINGS """

" NOTE Mappings to <Action> don't work with `noremap` mappings.

" Normal mode.
" Move text up and down.
nmap <A-Up> <Action>(MoveStatementUp)
nmap <A-Down> <Action>(MoveStatementDown)
" Additional functionality for <C-S-O>: clear last search highlighting after
" updating `.ideavimrc`. P.S. `a<BS><Esc>` is added to avoid unnecessary
" movement of the carriage.
nmap <C-S-O> <Action>(IdeaVim.ReloadVimRc.reload) :nohl<CR>a<BS><Esc>
" Go to declaration/file.
nmap gf <Action>(GotoDeclaration)
" Fuzzy file search.
nmap <Leader>f <Action>(GotoFile)
" Lint (Ctrl + Alt + L).
nmap <Leader>l <Action>(ReformatCode)
" Rename (Shift + F6).
nmap <Leader>r <Action>(RenameElement)
" Jump forward.
nmap <Leader>e <Plug>(easymotion-W)
" Jump backward.
nmap <Leader>E <Plug>(easymotion-B)
" Close content (current tab, content window, etc).
nmap <Leader>q <Action>(CloseContent)
" Split current tab vertically.
nmap <Leader>v <Action>(SplitVertically)
" Split current tab horizontally.
nmap <Leader>h <Action>(SplitHorizontally)
" NERDTree.
nnoremap <C-t> :NERDTreeToggle<CR>
let g:NERDTreeMapOpenVSplit='v'
let g:NERDTreeMapOpenSplit='h'
" For better `.ideavimrc` reloading.
nnoremap <leader>ri :action RestartIde<CR>

" Insert mode.
" Move text up and down.
imap <A-Up> <Action>(MoveStatementUp)
imap <A-Down> <Action>(MoveStatementDown)

" Visual mode.
" Move text up and down.
vmap <A-Up> <Action>(MoveStatementUp)
vmap <A-Down> <Action>(MoveStatementDown)