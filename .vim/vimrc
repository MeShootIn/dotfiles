" PLUGINS {{{

" TODO Auto installation of 'vim-plug' for Neovim by 'Windows (PowerShell)'.
call plug#begin('~/AppData/Local/nvim/plugged')
" Fake text.
Plug 'tkhren/vim-fake'
" Dracula theme.
Plug 'dracula/vim', { 'as': 'dracula' }
call plug#end()

" }}}

" BASICS {{{

" Dracula theme.
colorscheme dracula

" Sessions.
set sessionoptions+=globals

" Faster redrawing.
set lazyredraw
set ttyfast
set updatetime=2000
set ttimeoutlen=0
set timeoutlen=1000

" For integration with Russian layout.
set langmap=ёйцукенгшщзхъфывапролджэячсмитьбюЁЙЦУКЕHГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ;`qwertyuiop[]asdfghjkl\\;'zxcvbnm\\,.~QWERTYUIOP{}ASDFGHJKL:\\"ZXCVBNM<>

" Show full count of search matches.
set shortmess-=S

" For integration with system buffer.
set clipboard+=unnamedplus

" Command line executor.
set shell=zsh

" Disable compatibility with 'vi' which can cause unexpected issues.
set nocompatible

" Certain directories for backups, swaps and undos.
set backupdir=~/.vim/backup
set directory=~/.vim/swap
set noundofile

" No annoying sound on errors.
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Line numbering.
set number
set relativenumber
set ruler " Information about the current row, column, etc.

set termguicolors

" Syntax and files.
syntax enable
filetype plugin indent on
set encoding=utf8
set fileencodings=utf8
set ff=unix

" Spell check.
" Useful commands: `]s`, `[s`, `zg`, `z=`.
set nospell " Disabled by default in order to switch later via shortcuts.
set spelllang=en_us,ru_ru
" Usage: move the cursor to the wrong word and press 'z='

" Tabulation.
set autoindent " Copies indents from the current line when adding a new one.
set smartindent " The same as autoindent, but in addition, automatically sets
" indents in the right places.
set tabstop=2 " The number of spaces with which the tab character is displayed
" in the text.
set shiftwidth=2 " To adjust the width of the indents in the spaces.
set softtabstop=2 " The number of spaces that a tab character displays when
" appending.
set expandtab
set smarttab

" Mouse.
if has('mouse')
  set mouse=a
endif
set mousehide " Hide mouse cursor while typing.

" TODO WTF???
" if !has('nvim')
"   set ttymouse=xterm-256color " For integration with Alacritty terminal.
" endif

" Vertical bar.
set textwidth=80
set colorcolumn=80
hi ColorColumn ctermbg=red

" Highlight cursor line underneath the cursor horizontally.
set cursorline
" Do not let cursor scroll below or above N number of lines/columns when
" scrolling.
set scrolloff=5
set sidescrolloff=5
" Show partial command you type in the last line of the screen.
set showcmd
" Show the current mode.
set showmode
" Clear status line when config is reloaded.
set statusline=''
set completeopt=menu,menuone,noselect

" Search.
set hlsearch
set incsearch
set showmatch " Show matching words during a search.
set gdefault " Add the 'g' flag to search/replace by default.
set ignorecase
set wildignorecase
set smartcase " If the search pattern contains upper case characters, it will
" search in a case sensitive manner.

" For regular expressions turn magic on
set magic

" Sets how many lines of history VIM has to remember.
set history=1000

" Configure backspace so it acts as it should act.
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Wrap lines.
set wrap

" TODO https://www.reddit.com/r/neovim/comments/3v06lo/making_the_background_transparent/
au ColorScheme * hi Normal ctermbg=none guibg=none
au ColorScheme myspecialcolors hi Normal ctermbg=red guibg=red

" Netrw file explorer settings.
let g:netrw_banner = 0 " Hide banner above files.
let g:netrw_liststyle = 3 " Tree instead of plain view.
let g:netrw_browse_split = 3 " Vertical split window when <CR> pressed on file.

" Always show the status line.
set laststatus=2

" When emoji display errors occur.
set noemoji

" }}}

" FUNCTIONS {{{

function! s:visual_selection(direction, extra_filter) range
  let l:saved_reg = @"
  execute "normal vgvy"

  let l:pattern = escape(@", "\\/.*'$^~[]")
  let l:pattern = substitute(l:pattern, "\n$", "", "")

  if a:direction == 'gv'
    call CmdLine("Ack '" . l:pattern . "' " )
  elseif a:direction == 'replace'
    call CmdLine("%s" . '/'. l:pattern . '/')
  endif

  let @/ = l:pattern
  let @" = l:saved_reg
endfunction

" }}}

" MAPPINGS {{{

" TODO Make functions for key bindings.

" PLUGIN MAPPINGS {{{

" Fast surroundings.
vmap ' S'
vmap " S"
vmap ` S`
vmap ( S(
vmap ) S)
vmap _ S_

" }}}

" Disables.
noremap <PageUp> <nop>
noremap! <PageUp> <nop>
noremap <PageDown> <nop>
noremap! <PageDown> <nop>
noremap <Home> <nop>
noremap! <Home> <nop>
noremap <End> <nop>
noremap! <End> <nop>

" Additional functionality for `<Esc>`: clear last search highlighting.
nnoremap <Esc> <Esc><CMD>nohlsearch<CR>
inoremap <Esc> <Esc><CMD>nohlsearch<CR>
vnoremap <Esc> <Esc><CMD>nohlsearch<CR>

" Move cursor by display lines when wrapping.
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk
noremap $ g$
" Remap Vim's 0 to first non-blank character.
noremap 0 g^

" Stay in indent mode.
nnoremap <silent> > >>
nnoremap <silent> <Tab> >>
nnoremap <silent> < <<
nnoremap <silent> <S-Tab> <<
vnoremap <silent> > >gv
vnoremap <silent> <Tab> >gv
vnoremap <silent> < <gv
vnoremap <silent> <S-Tab> <gv

" For snippet lookup.
inoremap <C-g> <Esc>/<++><CR>"_c4l

" Space as usual.
nnoremap <Space> a<Space><Esc>

" Toggle case without moving cursor.
nnoremap ~ g~l

" Out of habit.
nnoremap <S-u> <C-r>
nnoremap <C-z> u

" Go Edit (word).
nnoremap ge "_ciw

" Delete and change without copying to register.
nnoremap x "_x
nnoremap X "_X
nnoremap d "_d
nnoremap D "_D
nnoremap c "_c
nnoremap C "_C
vnoremap d "_d
vnoremap D "_D
vnoremap c "_c
vnoremap C "_C

" Exit insert mode in terminal mode.
tnoremap <Esc> <C-\><C-n>

" Visual mode pressing `*` or `#` searches for the current selection.
vnoremap <silent> * :<C-u>call <SID>visual_selection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call <SID>visual_selection('', '')<CR>?<C-R>=@/<CR><CR>

" Bash like keys for the command line.
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-K> <C-U>
cnoremap <C-P> <Up>
cnoremap <C-N> <Down>

" Move screen up/down one line.
nnoremap <S-Down> <C-e>
nnoremap <S-Up> <C-y>

" Switch and improve search commands.
nnoremap * g*N
nnoremap # g#N

" Enter as usual.
nnoremap <CR> o<Esc>
autocmd CmdwinEnter * nnoremap <CR> <CR>
autocmd BufReadPost quickfix nnoremap <CR> <CR>

" For better scrolling.
nnoremap <C-f> <C-d><C-d>
nnoremap <C-b> <C-u><C-u>

" }}}

" MY SNIPPETS {{{

" FIXME Remove after configuration 'L3MON4D3/LuaSnip'.

" All.
autocmd FileType * imap <silent> ,db DEBUG<Esc>\\A<Space>
autocmd FileType * imap <silent> ,fx FIXME<Esc>\\A<Space>
autocmd FileType * imap <silent> ,in INFO<Esc>\\A<Space>
autocmd FileType * imap <silent> ,nt NOTE<Esc>\\A<Space>
autocmd FileType * imap <silent> ,td TODO<Esc>\\A<Space>
autocmd FileType * imap <silent> ,wr WARN<Esc>\\A<Space>

" Vim.
autocmd FileType vim imap <silent> ,bc <Esc>:-1read $HOME/.vim/my_snippets/vim/block_comment.vim<CR>i<C-g>
autocmd FileType vim imap <silent> ,cb ,bc
autocmd FileType vim imap <silent> ,de ,ed
autocmd FileType vim imap <silent> ,ec <Esc>:-1read $HOME/.vim/my_snippets/vim/echo.vim<CR>i<C-g>
autocmd FileType vim imap <silent> ,ed <Esc>:-1read $HOME/.vim/my_snippets/vim/echo_debug.vim<CR>i<C-g>
autocmd FileType vim imap <silent> ,fa <Esc>:-1read $HOME/.vim/my_snippets/vim/function_abort.vim<CR>i<C-g>
autocmd FileType vim imap <silent> ,fc <Esc>:-1read $HOME/.vim/my_snippets/vim/function_closure.vim<CR>i<C-g>
autocmd FileType vim imap <silent> ,fore <Esc>:-1read $HOME/.vim/my_snippets/vim/for_each.vim<CR>i<C-g>
autocmd FileType vim imap <silent> ,fori <Esc>:-1read $HOME/.vim/my_snippets/vim/for_items.vim<CR>i<C-g>
autocmd FileType vim imap <silent> ,fork <Esc>:-1read $HOME/.vim/my_snippets/vim/for_keys.vim<CR>i<C-g>
autocmd FileType vim imap <silent> ,forv <Esc>:-1read $HOME/.vim/my_snippets/vim/for_values.vim<CR>i<C-g>
autocmd FileType vim imap <silent> ,fr <Esc>:-1read $HOME/.vim/my_snippets/vim/function_range.vim<CR>i<C-g>
autocmd FileType vim imap <silent> ,if <Esc>:-1read $HOME/.vim/my_snippets/vim/if.vim<CR>i<C-g>
autocmd FileType vim imap <silent> ,la <Esc>:-1read $HOME/.vim/my_snippets/vim/lambda.vim<CR>i<C-g>
autocmd FileType vim imap <silent> ,le <Esc>:-1read $HOME/.vim/my_snippets/vim/let.vim<CR>i<C-g>

" Markdown.
autocmd FileType markdown imap <silent> ,! <Esc>:-1read $HOME/.vim/my_snippets/md/!.md<CR>i<C-g>
autocmd FileType markdown imap <silent> ,b <Esc>:-1read $HOME/.vim/my_snippets/md/bold.md<CR>i<C-g>
autocmd FileType markdown imap <silent> ,cb <Esc>:-1read $HOME/.vim/my_snippets/md/code_block.md<CR>i<C-g>
autocmd FileType markdown imap <silent> ,cite <Esc>:-1read $HOME/.vim/my_snippets/md/cite.md<CR>i<C-g>
autocmd FileType markdown imap <silent> ,dn ,nd
autocmd FileType markdown imap <silent> ,e <Esc>:-1read $HOME/.vim/my_snippets/md/emphatic.md<CR>i<C-g>
autocmd FileType markdown imap <silent> ,i <Esc>:-1read $HOME/.vim/my_snippets/md/italic.md<CR>i<C-g>
autocmd FileType markdown imap <silent> ,im <Esc>:-1read $HOME/.vim/my_snippets/md/image.md<CR>i<C-g>
autocmd FileType markdown imap <silent> ,imt <Esc>:-1read $HOME/.vim/my_snippets/md/image_title.md<CR>i<C-g>
autocmd FileType markdown imap <silent> ,li <Esc>:-1read $HOME/.vim/my_snippets/md/link.md<CR>i<C-g>
autocmd FileType markdown imap <silent> ,lt <Esc>:-1read $HOME/.vim/my_snippets/md/link_title.md<CR>i<C-g>
autocmd FileType markdown imap <silent> ,nd &ndash;
autocmd FileType markdown imap <silent> ,ol <Esc>:-1read $HOME/.vim/my_snippets/md/ordered_list.md<CR>i<C-g>
autocmd FileType markdown imap <silent> ,q <Esc>:-1read $HOME/.vim/my_snippets/md/quote.md<CR>i<C-g>
autocmd FileType markdown imap <silent> ,ref <Esc>:-1read $HOME/.vim/my_snippets/md/reference.md<CR>i<C-g>
autocmd FileType markdown imap <silent> ,tl ,lt
autocmd FileType markdown imap <silent> ,ul <Esc>:-1read $HOME/.vim/my_snippets/md/unordered_list.md<CR>i<C-g>

" }}}
